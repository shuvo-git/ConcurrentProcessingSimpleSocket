/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package socket.server;

import socket.server.service.RequestHandlerService;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class App {
    private static final int PORT = 9876;
    private static final String EXIT = "EXIT";

    public void startServerAndAcceptRequest() throws IOException, ClassNotFoundException {
        ServerSocket server = new ServerSocket(PORT);
        System.out.println("Starting socket server");
        int availableCPUCore = Runtime.getRuntime().availableProcessors();
        ExecutorService executorService = Executors.newFixedThreadPool(availableCPUCore-3);

        while (true) {

            System.out.println(Thread.currentThread().getName());
            RequestHandlerService requestHandlerService = new RequestHandlerService(server.accept());

            Future<?> result = executorService.submit(requestHandlerService);

//            if (result.get().equalsIgnoreCase(EXIT))
//                break;
        }
//        System.out.println("Shutting down socket server");
//        server.close();
    }


    public static void main(String[] args) throws IOException, ClassNotFoundException{
        new App().startServerAndAcceptRequest();
    }
}
